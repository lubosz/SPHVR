#!/usr/bin/env python3

from gi.repository import Gdk, Gst, Gtk, GdkX11, GstVideo, GstGL

import signal

from vrsink.sinks import *
from vrsink.widgets import *

signal.signal(signal.SIGINT, signal.SIG_DFL)

#video_uri = "file:///home/bmonkey/workspace/ges/data/hd/Return to split point.mp4"
video_uri = "file:///home/bmonkey/Videos/vr/Beach 3D 360 - panocam3d.com.mp4"

def quit_app(widget, pipeline):
    widget.hide()
    pipeline.set_state(Gst.State.NULL)
    Gtk.main_quit()


class GstOpenGLEditor():
    @staticmethod
    def pad_added_cb(element, stuff, sink):
        element.link(sink)

    @staticmethod
    def bus_cb(bus, message):
        if message.type == Gst.MessageType.EOS:
            print("eos")
            Gtk.main_quit()
        elif message.type == Gst.MessageType.ERROR:
            print(message.parse_error())
            Gtk.main_quit()
        else:
            pass

    def __init__(self):
        Gtk.init([])
        Gst.init([])

        width, height = 1280, 720
        #width, height = 640, 480
        self.aspect = width/height

        pipeline = Gst.Pipeline()

        src = Gst.ElementFactory.make("uridecodebin", None)
        src.set_property("uri", video_uri)

        sink = CairoGLSink(width, height)

        # caps
        #caps = Gst.Caps.from_string("video/x-raw, width=%d, height=%d" % (width, height))
        #cf = Gst.ElementFactory.make("capsfilter")
        #cf.set_property("caps", caps)
        #pipeline.add(src, cf, sink)
        #src.link(cf)
        #cf.link(sink)

        pipeline.add(src, sink.sink)
        src.link(sink.sink)
        src.connect("pad-added", self.pad_added_cb, sink.sink)

        bus = pipeline.get_bus()
        bus.add_signal_watch()
        bus.connect("message", self.bus_cb)

        window = Gtk.Window()
        window.connect("delete-event", self.window_closed, pipeline)
        window.connect("key-press-event", self.key_pressed, pipeline)
        window.set_default_size(width, height)
        window.set_title("SPHVR")

        outer_box = Gtk.Box()
        outer_box.set_orientation(Gtk.Orientation.VERTICAL)

        box = Gtk.Box()
        box.set_orientation(Gtk.Orientation.HORIZONTAL)

        #slider_box = Transformation2DSliderBox(transform, sink.scene)
        #slider_box = Transformation3DSliderBox(transform)

        slider_box = SphereBox()

        #sink.scene.slider_box = slider_box
        #sink.scene.reposition(slider_box.build_mvp())
        sink.scene.window = window

        box.add(slider_box)
        box.add(sink)

        outer_box.add(box)

        pause_button = Gtk.Button()
        pause_button.set_label("Pause")
        outer_box.add(pause_button)

        pause_button.connect("clicked", self.pause, pipeline, sink)

        window.add(outer_box)

        from gi.repository import GdkPixbuf
        pixbuf = GdkPixbuf.Pixbuf.new_from_file("data/icon/sphvr.png")
        theme = Gtk.IconTheme.get_default()
        theme.add_builtin_icon("sphvr", 256, pixbuf)
        window.set_icon_name("sphvr")

        window.show_all()

        sink.set_handle()

        if pipeline.set_state(Gst.State.PLAYING) == Gst.StateChangeReturn.FAILURE:
            pipeline.set_state(Gst.State.NULL)
        else:
            Gtk.main()

    @staticmethod
    def pause(button, pipeline, sink):
        if pipeline.get_state(Gst.CLOCK_TIME_NONE)[1] == Gst.State.PAUSED:
            pipeline.set_state(Gst.State.PLAYING)
        else:
            pipeline.set_state(Gst.State.PAUSED)

    @staticmethod
    def window_closed(widget, event, pipeline):
        quit_app(widget, pipeline)

    @staticmethod
    def key_pressed(widget, key, pipeline):
        if key.keyval == Gdk.KEY_Escape:
            quit_app(widget, pipeline)


GstOpenGLEditor()
